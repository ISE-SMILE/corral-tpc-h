// Code generated by "enumer -type=partsuppFields"; DO NOT EDIT.

//
package queries

import (
	"fmt"
)

const _partsuppFieldsName = "PS_PARTKEYPS_SUPPKEYPS_AVAILQTYPS_SUPPLYCOSTPS_COMMENT"

var _partsuppFieldsIndex = [...]uint8{0, 10, 20, 31, 44, 54}

func (i partsuppFields) String() string {
	if i < 0 || i >= partsuppFields(len(_partsuppFieldsIndex)-1) {
		return fmt.Sprintf("partsuppFields(%d)", i)
	}
	return _partsuppFieldsName[_partsuppFieldsIndex[i]:_partsuppFieldsIndex[i+1]]
}

var _partsuppFieldsValues = []partsuppFields{0, 1, 2, 3, 4}

var _partsuppFieldsNameToValueMap = map[string]partsuppFields{
	_partsuppFieldsName[0:10]:  0,
	_partsuppFieldsName[10:20]: 1,
	_partsuppFieldsName[20:31]: 2,
	_partsuppFieldsName[31:44]: 3,
	_partsuppFieldsName[44:54]: 4,
}

// partsuppFieldsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func partsuppFieldsString(s string) (partsuppFields, error) {
	if val, ok := _partsuppFieldsNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to partsuppFields values", s)
}

// partsuppFieldsValues returns all values of the enum
func partsuppFieldsValues() []partsuppFields {
	return _partsuppFieldsValues
}

// IsApartsuppFields returns "true" if the value is listed in the enum definition. "false" otherwise
func (i partsuppFields) IsApartsuppFields() bool {
	for _, v := range _partsuppFieldsValues {
		if i == v {
			return true
		}
	}
	return false
}
