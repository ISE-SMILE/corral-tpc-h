// Code generated by "enumer -type=regionFields"; DO NOT EDIT.

//
package queries

import (
	"fmt"
)

const _regionFieldsName = "R_REGIONKEYR_NAMER_COMMENT"

var _regionFieldsIndex = [...]uint8{0, 11, 17, 26}

func (i regionFields) String() string {
	if i < 0 || i >= regionFields(len(_regionFieldsIndex)-1) {
		return fmt.Sprintf("regionFields(%d)", i)
	}
	return _regionFieldsName[_regionFieldsIndex[i]:_regionFieldsIndex[i+1]]
}

var _regionFieldsValues = []regionFields{0, 1, 2}

var _regionFieldsNameToValueMap = map[string]regionFields{
	_regionFieldsName[0:11]:  0,
	_regionFieldsName[11:17]: 1,
	_regionFieldsName[17:26]: 2,
}

// regionFieldsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func regionFieldsString(s string) (regionFields, error) {
	if val, ok := _regionFieldsNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to regionFields values", s)
}

// regionFieldsValues returns all values of the enum
func regionFieldsValues() []regionFields {
	return _regionFieldsValues
}

// IsAregionFields returns "true" if the value is listed in the enum definition. "false" otherwise
func (i regionFields) IsAregionFields() bool {
	for _, v := range _regionFieldsValues {
		if i == v {
			return true
		}
	}
	return false
}
