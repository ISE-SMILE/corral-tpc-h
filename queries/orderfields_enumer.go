// Code generated by "enumer -type=orderFields"; DO NOT EDIT.

//
package queries

import (
	"fmt"
)

const _orderFieldsName = "O_ORDERKEYO_CUSTKEYO_ORDERSTATUSO_TOTALPRICEO_ORDERDATEO_ORDERPRIORITYO_CLERKO_SHIPPRIORITYO_COMMENT"

var _orderFieldsIndex = [...]uint8{0, 10, 19, 32, 44, 55, 70, 77, 91, 100}

func (i orderFields) String() string {
	if i < 0 || i >= orderFields(len(_orderFieldsIndex)-1) {
		return fmt.Sprintf("orderFields(%d)", i)
	}
	return _orderFieldsName[_orderFieldsIndex[i]:_orderFieldsIndex[i+1]]
}

var _orderFieldsValues = []orderFields{0, 1, 2, 3, 4, 5, 6, 7, 8}

var _orderFieldsNameToValueMap = map[string]orderFields{
	_orderFieldsName[0:10]:   0,
	_orderFieldsName[10:19]:  1,
	_orderFieldsName[19:32]:  2,
	_orderFieldsName[32:44]:  3,
	_orderFieldsName[44:55]:  4,
	_orderFieldsName[55:70]:  5,
	_orderFieldsName[70:77]:  6,
	_orderFieldsName[77:91]:  7,
	_orderFieldsName[91:100]: 8,
}

// orderFieldsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func orderFieldsString(s string) (orderFields, error) {
	if val, ok := _orderFieldsNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to orderFields values", s)
}

// orderFieldsValues returns all values of the enum
func orderFieldsValues() []orderFields {
	return _orderFieldsValues
}

// IsAorderFields returns "true" if the value is listed in the enum definition. "false" otherwise
func (i orderFields) IsAorderFields() bool {
	for _, v := range _orderFieldsValues {
		if i == v {
			return true
		}
	}
	return false
}
