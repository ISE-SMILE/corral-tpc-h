// Code generated by "enumer -type=partFields"; DO NOT EDIT.

//
package queries

import (
	"fmt"
)

const _partFieldsName = "P_PARTKEYP_NAMEP_MFGRP_BRANDP_TYPEP_SIZEP_CONTAINERP_RETAILPRICEP_COMMENT"

var _partFieldsIndex = [...]uint8{0, 9, 15, 21, 28, 34, 40, 51, 64, 73}

func (i partFields) String() string {
	if i < 0 || i >= partFields(len(_partFieldsIndex)-1) {
		return fmt.Sprintf("partFields(%d)", i)
	}
	return _partFieldsName[_partFieldsIndex[i]:_partFieldsIndex[i+1]]
}

var _partFieldsValues = []partFields{0, 1, 2, 3, 4, 5, 6, 7, 8}

var _partFieldsNameToValueMap = map[string]partFields{
	_partFieldsName[0:9]:   0,
	_partFieldsName[9:15]:  1,
	_partFieldsName[15:21]: 2,
	_partFieldsName[21:28]: 3,
	_partFieldsName[28:34]: 4,
	_partFieldsName[34:40]: 5,
	_partFieldsName[40:51]: 6,
	_partFieldsName[51:64]: 7,
	_partFieldsName[64:73]: 8,
}

// partFieldsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func partFieldsString(s string) (partFields, error) {
	if val, ok := _partFieldsNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to partFields values", s)
}

// partFieldsValues returns all values of the enum
func partFieldsValues() []partFields {
	return _partFieldsValues
}

// IsApartFields returns "true" if the value is listed in the enum definition. "false" otherwise
func (i partFields) IsApartFields() bool {
	for _, v := range _partFieldsValues {
		if i == v {
			return true
		}
	}
	return false
}
