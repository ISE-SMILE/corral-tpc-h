// Code generated by "enumer -type=QueryType"; DO NOT EDIT.

package queries

import (
	"fmt"
	"strings"
)

const _QueryTypeName = "TPCH_Q1TPCH_Q2TPCH_Q3TPCH_Q4TPCH_Q5TPCH_Q6TPCH_Q7TPCH_Q8TPCH_Q9TPCH_Q10TPCH_Q11TPCH_Q12TPCH_Q13TPCH_Q14TPCH_Q15TPCH_Q16TPCH_Q17TPCH_Q18TPCH_Q19TPCH_Q20TPCH_Q21TPCH_Q22TPCH_IO"

var _QueryTypeIndex = [...]uint8{0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 71, 79, 87, 95, 103, 111, 119, 127, 135, 143, 151, 159, 167, 174}

const _QueryTypeLowerName = "tpch_q1tpch_q2tpch_q3tpch_q4tpch_q5tpch_q6tpch_q7tpch_q8tpch_q9tpch_q10tpch_q11tpch_q12tpch_q13tpch_q14tpch_q15tpch_q16tpch_q17tpch_q18tpch_q19tpch_q20tpch_q21tpch_q22tpch_io"

func (i QueryType) String() string {
	if i < 0 || i >= QueryType(len(_QueryTypeIndex)-1) {
		return fmt.Sprintf("QueryType(%d)", i)
	}
	return _QueryTypeName[_QueryTypeIndex[i]:_QueryTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _QueryTypeNoOp() {
	var x [1]struct{}
	_ = x[TPCH_Q1-(0)]
	_ = x[TPCH_Q2-(1)]
	_ = x[TPCH_Q3-(2)]
	_ = x[TPCH_Q4-(3)]
	_ = x[TPCH_Q5-(4)]
	_ = x[TPCH_Q6-(5)]
	_ = x[TPCH_Q7-(6)]
	_ = x[TPCH_Q8-(7)]
	_ = x[TPCH_Q9-(8)]
	_ = x[TPCH_Q10-(9)]
	_ = x[TPCH_Q11-(10)]
	_ = x[TPCH_Q12-(11)]
	_ = x[TPCH_Q13-(12)]
	_ = x[TPCH_Q14-(13)]
	_ = x[TPCH_Q15-(14)]
	_ = x[TPCH_Q16-(15)]
	_ = x[TPCH_Q17-(16)]
	_ = x[TPCH_Q18-(17)]
	_ = x[TPCH_Q19-(18)]
	_ = x[TPCH_Q20-(19)]
	_ = x[TPCH_Q21-(20)]
	_ = x[TPCH_Q22-(21)]
	_ = x[TPCH_IO-(22)]
}

var _QueryTypeValues = []QueryType{TPCH_Q1, TPCH_Q2, TPCH_Q3, TPCH_Q4, TPCH_Q5, TPCH_Q6, TPCH_Q7, TPCH_Q8, TPCH_Q9, TPCH_Q10, TPCH_Q11, TPCH_Q12, TPCH_Q13, TPCH_Q14, TPCH_Q15, TPCH_Q16, TPCH_Q17, TPCH_Q18, TPCH_Q19, TPCH_Q20, TPCH_Q21, TPCH_Q22, TPCH_IO}

var _QueryTypeNameToValueMap = map[string]QueryType{
	_QueryTypeName[0:7]:          TPCH_Q1,
	_QueryTypeLowerName[0:7]:     TPCH_Q1,
	_QueryTypeName[7:14]:         TPCH_Q2,
	_QueryTypeLowerName[7:14]:    TPCH_Q2,
	_QueryTypeName[14:21]:        TPCH_Q3,
	_QueryTypeLowerName[14:21]:   TPCH_Q3,
	_QueryTypeName[21:28]:        TPCH_Q4,
	_QueryTypeLowerName[21:28]:   TPCH_Q4,
	_QueryTypeName[28:35]:        TPCH_Q5,
	_QueryTypeLowerName[28:35]:   TPCH_Q5,
	_QueryTypeName[35:42]:        TPCH_Q6,
	_QueryTypeLowerName[35:42]:   TPCH_Q6,
	_QueryTypeName[42:49]:        TPCH_Q7,
	_QueryTypeLowerName[42:49]:   TPCH_Q7,
	_QueryTypeName[49:56]:        TPCH_Q8,
	_QueryTypeLowerName[49:56]:   TPCH_Q8,
	_QueryTypeName[56:63]:        TPCH_Q9,
	_QueryTypeLowerName[56:63]:   TPCH_Q9,
	_QueryTypeName[63:71]:        TPCH_Q10,
	_QueryTypeLowerName[63:71]:   TPCH_Q10,
	_QueryTypeName[71:79]:        TPCH_Q11,
	_QueryTypeLowerName[71:79]:   TPCH_Q11,
	_QueryTypeName[79:87]:        TPCH_Q12,
	_QueryTypeLowerName[79:87]:   TPCH_Q12,
	_QueryTypeName[87:95]:        TPCH_Q13,
	_QueryTypeLowerName[87:95]:   TPCH_Q13,
	_QueryTypeName[95:103]:       TPCH_Q14,
	_QueryTypeLowerName[95:103]:  TPCH_Q14,
	_QueryTypeName[103:111]:      TPCH_Q15,
	_QueryTypeLowerName[103:111]: TPCH_Q15,
	_QueryTypeName[111:119]:      TPCH_Q16,
	_QueryTypeLowerName[111:119]: TPCH_Q16,
	_QueryTypeName[119:127]:      TPCH_Q17,
	_QueryTypeLowerName[119:127]: TPCH_Q17,
	_QueryTypeName[127:135]:      TPCH_Q18,
	_QueryTypeLowerName[127:135]: TPCH_Q18,
	_QueryTypeName[135:143]:      TPCH_Q19,
	_QueryTypeLowerName[135:143]: TPCH_Q19,
	_QueryTypeName[143:151]:      TPCH_Q20,
	_QueryTypeLowerName[143:151]: TPCH_Q20,
	_QueryTypeName[151:159]:      TPCH_Q21,
	_QueryTypeLowerName[151:159]: TPCH_Q21,
	_QueryTypeName[159:167]:      TPCH_Q22,
	_QueryTypeLowerName[159:167]: TPCH_Q22,
	_QueryTypeName[167:174]:      TPCH_IO,
	_QueryTypeLowerName[167:174]: TPCH_IO,
}

var _QueryTypeNames = []string{
	_QueryTypeName[0:7],
	_QueryTypeName[7:14],
	_QueryTypeName[14:21],
	_QueryTypeName[21:28],
	_QueryTypeName[28:35],
	_QueryTypeName[35:42],
	_QueryTypeName[42:49],
	_QueryTypeName[49:56],
	_QueryTypeName[56:63],
	_QueryTypeName[63:71],
	_QueryTypeName[71:79],
	_QueryTypeName[79:87],
	_QueryTypeName[87:95],
	_QueryTypeName[95:103],
	_QueryTypeName[103:111],
	_QueryTypeName[111:119],
	_QueryTypeName[119:127],
	_QueryTypeName[127:135],
	_QueryTypeName[135:143],
	_QueryTypeName[143:151],
	_QueryTypeName[151:159],
	_QueryTypeName[159:167],
	_QueryTypeName[167:174],
}

// QueryTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func QueryTypeString(s string) (QueryType, error) {
	if val, ok := _QueryTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _QueryTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to QueryType values", s)
}

// QueryTypeValues returns all values of the enum
func QueryTypeValues() []QueryType {
	return _QueryTypeValues
}

// QueryTypeStrings returns a slice of all String values of the enum
func QueryTypeStrings() []string {
	strs := make([]string, len(_QueryTypeNames))
	copy(strs, _QueryTypeNames)
	return strs
}

// IsAQueryType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i QueryType) IsAQueryType() bool {
	for _, v := range _QueryTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
